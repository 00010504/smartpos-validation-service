// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: ping.proto

package marketing_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketingServiceClient is the client API for MarketingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketingServiceClient interface {
	Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error)
}

type marketingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketingServiceClient(cc grpc.ClientConnInterface) MarketingServiceClient {
	return &marketingServiceClient{cc}
}

func (c *marketingServiceClient) Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error) {
	out := new(PingPong)
	err := c.cc.Invoke(ctx, "/MarketingService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketingServiceServer is the server API for MarketingService service.
// All implementations must embed UnimplementedMarketingServiceServer
// for forward compatibility
type MarketingServiceServer interface {
	Ping(context.Context, *PingPong) (*PingPong, error)
	mustEmbedUnimplementedMarketingServiceServer()
}

// UnimplementedMarketingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketingServiceServer struct {
}

func (UnimplementedMarketingServiceServer) Ping(context.Context, *PingPong) (*PingPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMarketingServiceServer) mustEmbedUnimplementedMarketingServiceServer() {}

// UnsafeMarketingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketingServiceServer will
// result in compilation errors.
type UnsafeMarketingServiceServer interface {
	mustEmbedUnimplementedMarketingServiceServer()
}

func RegisterMarketingServiceServer(s grpc.ServiceRegistrar, srv MarketingServiceServer) {
	s.RegisterService(&MarketingService_ServiceDesc, srv)
}

func _MarketingService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MarketingService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingServiceServer).Ping(ctx, req.(*PingPong))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketingService_ServiceDesc is the grpc.ServiceDesc for MarketingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MarketingService",
	HandlerType: (*MarketingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MarketingService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ping.proto",
}
